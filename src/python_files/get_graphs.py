import pickle
import copy
import sys
import os
from plot_generation import *
from compare_pareto_curves import getPoints
import multiprocessing

import matplotlib
matplotlib.use('Agg') 

import pylab
import matplotlib.pyplot as plt
#plt.ioff()
from inputs import *#this file contains all the inputs
from scipy.spatial import distance
from src_parse_and_apx_op_space_gen import *
from modify_operator_sample_file import *
#from sample_operand_and_sweep_apx_space import *
import settings 
from extract_result_properties import *
from plot_generation import *
import matplotlib.pyplot as plt
from find_position import *
from write_readable_output import *
from clean_up import *
from simulating_annealer import *
from misc import *
import datetime
from points_class import *
import pickle
from points_class import *
from list_all_files_in_a_folder import *
from src_parse_and_apx_op_space_gen import *
from pareto_set_class import *
#**--------------------**
#only reads the files and generate a graph. This module is for convenience of
#graphing the info that I need. simply comment the points that you don't want
#to be graphed
#**--------------------**
#**--------------------**
#--------------------**
def main():
    srcFile = "pareto_set_file.txt" #file containing paretoSets
    inputObj = inputClass()
    inputObj.expandAddress()
    CSrcFolderAddress = inputObj.CSrcFolderAddress
    lOfCSrcFileAddress = inputObj.lOfCSrcFileAddress 
    generateMakeFile = inputObj.generateMakeFile
    rootFolder = inputObj.rootFolder 
    AllInputScenariosInOneFile = inputObj.AllInputScenariosInOneFile
    AllInputFileOrDirectoryName = inputObj.AllInputFileOrDirectoryName 
    finalResultFileName = inputObj.finalResultFileName
    rootFolder = inputObj.rootFolder 
    rootResultFolderName = rootFolder + "/" + settings.generatedTextFolderName
    finalResultFileFullAddress = rootResultFolderName + "/" + finalResultFileName
    #---all points of the combination 
    lOf_combining_all_points = getPoints("pareto_curved_combined_pickled_all_points");
    lOfQualityValue_after_combining_all_points = map(lambda x: x.get_quality(), lOf_combining_all_points)
    lOfEnergy_after_combining_all_points = map(lambda x: x.get_energy(), lOf_combining_all_points)
    
    #---pareto points of the combination 
    lOfParetoPoints = getPoints("pareto_curved_combined_pickled")
    
    lOfQualityValue_after_combining_pareto_points = map(lambda x: x.get_quality(), lOfParetoPoints)
    lOfEnergy_after_combining_pareto_points = map(lambda x: x.get_energy(), lOfParetoPoints)

    #---pareto points for ref 
    lOfParetoPoints_ref = getPoints("ref_results_pickled") #getting the ref points
    lOfQualityValue_ref = map(lambda x: x.get_quality(), lOfParetoPoints_ref)
    lOfEnergyValue_ref = map(lambda x: x.get_energy(), lOfParetoPoints_ref)
    
    #---all points for s2
    lOfParetoPoints_s2 = getPoints("results_pickled_all_points_s2") #getting the ref points
    lOfQualityValue_s2 = map(lambda x: x.get_quality(), lOfParetoPoints_s2)
    lOfEnergyValue_s2 = map(lambda x: x.get_energy(), lOfParetoPoints_s2)

    
    #---all points for s3
    lOfParetoPoints_s3 = getPoints("results_pickled_all_points_s3") #getting the ref points
    lOfQualityValue_s3 = map(lambda x: x.get_quality(), lOfParetoPoints_s3)
    lOfEnergyValue_s3 = map(lambda x: x.get_energy(), lOfParetoPoints_s3)



    if settings.runToolChainGenerateGraph: 
        generateGraph(lOfQualityValue_after_combining_pareto_points,
                lOfEnergy_after_combining_pareto_points, "quality", 
                "Energy", "^")                                                          #after combining
       
        generateGraph(lOfQualityValue_after_combining_all_points,
                lOfEnergy_after_combining_all_points, "quality", 
                "Energy", "x")                                                          #after combining
        
        generateGraph(lOfQualityValue_ref,lOfEnergyValue_ref, "quality", "Energy", "*") #flattened version
        generateGraph(lOfQualityValue_s2,lOfEnergyValue_s2, "quality", "Energy", "o")   #after s2
        generateGraph(lOfQualityValue_s3,lOfEnergyValue_s3, "quality", "Energy", "+")   #after s3
        pylab.savefig("combine.png") #saving the figure generated by generateGraph
        

main()
